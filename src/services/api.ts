/**
 * API —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Django backend
 * –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–π –¥–ª—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É
 */

import axios, { AxiosInstance, AxiosResponse } from 'axios';

/**
 * –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
 */
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8020/api/v1';

/**
 * –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
 */
const apiClient: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

/**
 * Interceptor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –î–æ–±–∞–≤–ª—è–µ—Ç Telegram Web App –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
 */
apiClient.interceptors.request.use(
  (config) => {
    // –î–æ–±–∞–≤–ª—è–µ–º Telegram Web App –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (window.Telegram?.WebApp?.initDataUnsafe) {
      const telegramData = window.Telegram.WebApp.initDataUnsafe;
      config.headers['X-Telegram-User-ID'] = telegramData.user?.id;
      config.headers['X-Telegram-Username'] = telegramData.user?.username;
      config.headers['X-Telegram-First-Name'] = telegramData.user?.first_name;
      config.headers['X-Telegram-Last-Name'] = telegramData.user?.last_name;
      config.headers['X-Telegram-Auth-Date'] = telegramData.auth_date;
      config.headers['X-Telegram-Hash'] = telegramData.hash;
    }
    
    console.log('üîÑ API Request:', config.method?.toUpperCase(), config.url);
    return config;
  },
  (error) => {
    console.error('‚ùå API Request Error:', error);
    return Promise.reject(error);
  }
);

/**
 * Interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
 * –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ—à–∏–±–∫–∏
 */
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    console.log('‚úÖ API Response:', response.status, response.config.url);
    return response;
  },
  (error) => {
    console.error('‚ùå API Response Error:', error.response?.status, error.response?.data);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error.response?.status === 401) {
      console.warn('üîí Unauthorized - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    } else if (error.response?.status === 429) {
      console.warn('‚è≥ Rate limit exceeded');
    } else if (error.response?.status >= 500) {
      console.error('üî• Server error');
    }
    
    return Promise.reject(error);
  }
);

/**
 * –ë–∞–∑–æ–≤—ã–π API Service –∫–ª–∞—Å—Å
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export class ApiService {
  protected client = apiClient;

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å
   */
  protected async get<T>(url: string, params?: any): Promise<T> {
    const response = await this.client.get<T>(url, { params });
    return response.data;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å
   */
  protected async post<T>(url: string, data?: any): Promise<T> {
    const response = await this.client.post<T>(url, data);
    return response.data;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç PUT –∑–∞–ø—Ä–æ—Å
   */
  protected async put<T>(url: string, data?: any): Promise<T> {
    const response = await this.client.put<T>(url, data);
    return response.data;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç DELETE –∑–∞–ø—Ä–æ—Å
   */
  protected async delete<T>(url: string): Promise<T> {
    const response = await this.client.delete<T>(url);
    return response.data;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
   */
  async healthCheck(): Promise<boolean> {
    try {
      await this.get('/health/');
      return true;
    } catch (error) {
      console.error('API health check failed:', error);
      return false;
    }
  }
}

export default apiClient; 