/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Django AI Engine API endpoints
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ localStorage
 */

import { ApiService } from './api';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ç–∫—Å–ø–µ—Ä—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ Django –º–æ–¥–µ–ª–∏
 */
export interface Expert {
  id: number;
  name: string;
  role: string;
  description: string;
  avatar_url?: string;
  expertise_areas: string[];
  total_conversations: number;
  total_messages: number;
  average_rating: number;
  required_subscription: 'free' | 'pro' | 'premium';
  is_available: boolean;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
 */
export interface ChatMessage {
  id: number;
  message_type: 'user' | 'expert' | 'system';
  content: string;
  created_at: string;
  user_rating?: number;
  metadata?: {
    model_used?: string;
    tokens_used?: number;
    generation_time?: number;
    temperature?: number;
    provider?: string;
  };
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 */
export interface ConversationSession {
  id: number;
  title: string;
  status: string;
  total_messages: number;
  created_at: string;
  last_activity: string;
  context_summary?: string;
  expert: {
    id: number;
    name: string;
    role: string;
    avatar_url?: string;
  };
  last_message?: {
    content: string;
    created_at: string;
    message_type: string;
  };
}

/**
 * –û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç—É
 */
export interface SendMessageResponse {
  success: boolean;
  session_id: number;
  user_message: {
    id: number;
    content: string;
    created_at: string;
  };
  expert_response: {
    id: number;
    content: string;
    created_at: string;
    metadata?: any;
  };
  expert: {
    id: number;
    name: string;
    role?: string;
    avatar_url?: string;
  };
  error?: string;
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export interface SendMessageRequest {
  expert_id: number;
  message: string;
  session_id?: number;
}

/**
 * –û—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 */
export interface ExpertsResponse {
  experts: Expert[];
  user_subscription: string;
}

/**
 * –û—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface SessionsResponse {
  sessions: ConversationSession[];
  has_more: boolean;
}

/**
 * –û—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
 */
export interface SessionMessagesResponse {
  session: ConversationSession;
  messages: ChatMessage[];
  has_more: boolean;
}

/**
 * –û—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
 */
export interface LastActiveSessionResponse {
  has_session: boolean;
  session: ConversationSession | null;
  last_messages: ChatMessage[];
  expert?: {
    id: number;
    name: string;
    role: string;
    avatar_url?: string;
    description?: string;
  };
  metadata?: {
    messages_loaded?: number;
    session_restored_at?: string;
    cache_hit?: boolean;
    session_priority_score?: number;
  };
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UserSessionsStatistics {
  general_stats: {
    total_sessions: number;
    total_messages: number;
    active_sessions_count: number;
    experts_used: number;
    period_days: number;
    avg_messages_per_session: number;
  };
  expert_stats: ExpertStatistics[];
  active_sessions: ActiveSessionInfo[];
  resumable_sessions: ResumableSessionInfo[];
  recommendations: SessionRecommendation[];
  metadata: {
    generated_at: string;
    period_start: string;
    period_end: string;
  };
}

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É
 */
export interface ExpertStatistics {
  expert: {
    id: number;
    name: string;
    role: string;
    avatar_url?: string;
  };
  total_sessions: number;
  total_messages: number;
  active_sessions: number;
  last_activity: string | null;
  avg_session_length: number;
  priority_score: number;
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
 */
export interface ActiveSessionInfo {
  session_id: number;
  expert_id: number;
  expert_name: string;
  last_activity: string;
  total_messages: number;
  title: string;
  priority_score: number;
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏, –≥–æ—Ç–æ–≤–æ–π –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
 */
export interface ResumableSessionInfo {
  session_id: number;
  expert_id: number;
  expert_name: string;
  last_activity: string;
  total_messages: number;
  priority_score: number;
  status: string;
  context_summary?: string;
}

/**
 * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Å—Å–∏–µ–π
 */
export interface SessionRecommendation {
  type: 'resume_session' | 'new_session' | 'complete_session';
  session_id: number;
  expert_id: number;
  recommendation: string;
  priority: number;
}

/**
 * –ö–ª—é—á–∏ –¥–ª—è localStorage
 */
const STORAGE_KEYS = {
  EXPERT_SESSIONS: 'sovetum_expert_sessions',
  ACTIVE_SESSION: 'sovetum_active_session'
} as const;

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ localStorage
 */
interface StoredSessionData {
  expertId: number;
  sessionId: number;
  lastActivity: string;
  expertName: string;
  expertRole?: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
 */
interface ActiveSessionData {
  expertId: number;
  sessionId: number;
  expertName: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Django backend
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏
 */
export class ExpertService extends ApiService {
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage
   */
  private getStoredSessions(): Record<number, StoredSessionData> {
    try {
      const stored = localStorage.getItem(STORAGE_KEYS.EXPERT_SESSIONS);
      return stored ? JSON.parse(stored) : {};
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∏–∑ localStorage:', error);
      return {};
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ localStorage
   */
  private saveSessionData(expertId: number, sessionData: StoredSessionData): void {
    try {
      const sessions = this.getStoredSessions();
      sessions[expertId] = sessionData;
      localStorage.setItem(STORAGE_KEYS.EXPERT_SESSIONS, JSON.stringify(sessions));
      
      console.log(`üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${expertId}:`, sessionData);
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ localStorage:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
   */
  getExpertSessionId(expertId: number): number | null {
    const sessions = this.getStoredSessions();
    const sessionData = sessions[expertId];
    
    if (!sessionData) {
      console.log(`üìù –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${expertId}`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
    const lastActivity = new Date(sessionData.lastActivity);
    const now = new Date();
    const hoursSinceLastActivity = (now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60);
    
    if (hoursSinceLastActivity > 24) {
      console.log(`‚è∞ –°–µ—Å—Å–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${expertId} —É—Å—Ç–∞—Ä–µ–ª–∞ (${hoursSinceLastActivity.toFixed(1)}—á –Ω–∞–∑–∞–¥)`);
      this.clearExpertSession(expertId);
      return null;
    }

    console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é ${sessionData.sessionId} –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${expertId}`);
    return sessionData.sessionId;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
   */
  private setActiveSession(expertId: number, sessionId: number, expertName: string): void {
    try {
      const activeSession: ActiveSessionData = {
        expertId,
        sessionId,
        expertName
      };
      localStorage.setItem(STORAGE_KEYS.ACTIVE_SESSION, JSON.stringify(activeSession));
      console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:`, activeSession);
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  getActiveSession(): ActiveSessionData | null {
    try {
      const stored = localStorage.getItem(STORAGE_KEYS.ACTIVE_SESSION);
      return stored ? JSON.parse(stored) : null;
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
   */
  clearExpertSession(expertId: number): void {
    try {
      const sessions = this.getStoredSessions();
      delete sessions[expertId];
      localStorage.setItem(STORAGE_KEYS.EXPERT_SESSIONS, JSON.stringify(sessions));
      
      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É
      const activeSession = this.getActiveSession();
      if (activeSession && activeSession.expertId === expertId) {
        localStorage.removeItem(STORAGE_KEYS.ACTIVE_SESSION);
      }
      
      console.log(`üßπ –°–µ—Å—Å–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${expertId} –æ—á–∏—â–µ–Ω–∞`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
   */
  createNewSession(expertId: number): void {
    console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${expertId}`);
    this.clearExpertSession(expertId);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏
   */
  clearAllSessions(): void {
    try {
      localStorage.removeItem(STORAGE_KEYS.EXPERT_SESSIONS);
      localStorage.removeItem(STORAGE_KEYS.ACTIVE_SESSION);
      console.log('üßπ –í—Å–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö
   */
  getAllSessions(): Record<number, StoredSessionData> {
    return this.getStoredSessions();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram Web App endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async getExperts(): Promise<ExpertsResponse> {
    try {
      console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏–∑ Telegram Web App...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Telegram endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const response = await this.get<ExpertsResponse>('/ai-engine/telegram/experts/');
      
      console.log('‚úÖ –≠–∫—Å–ø–µ—Ä—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å backend:', response.experts.length);
      return response;
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:', error);
      
      // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤');
      
      const fallbackExperts: Expert[] = [
        {
          id: 1,
          name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∏–∑–Ω–µ—Å–æ–≤',
          role: '–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
          description: '–û–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∏ —Å—Ç—Ä–∞—Ç–µ–≥. –ü–æ–º–æ–≥—É —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–∏–∑–Ω–µ—Å–∞, –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏.',
          expertise_areas: ['business', 'entrepreneurship', 'strategy'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'free',
          is_available: true
        },
        {
          id: 2,
          name: '–ï–ª–µ–Ω–∞ –ü—Å–∏—Ö–æ–ª–æ–≥–æ–≤–∞',
          role: '–ü—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
          description: '–ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ª–∏—á–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.',
          expertise_areas: ['psychology', 'relationships', 'mental_health'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'free',
          is_available: true
        },
        {
          id: 3,
          name: '–î–º–∏—Ç—Ä–∏–π –§–∏–Ω–∞–Ω—Å–æ–≤',
          role: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫',
          description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±—é–¥–∂–µ—Ç–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.',
          expertise_areas: ['finance', 'investing', 'budgeting'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'pro',
          is_available: true
        },
        {
          id: 4,
          name: '–ê–Ω–Ω–∞ –ö–∞—Ä—å–µ—Ä–æ–≤–∞',
          role: '–ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á',
          description: '–ü–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º.',
          expertise_areas: ['career', 'job_search', 'professional_development'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'free',
          is_available: true
        },
        {
          id: 5,
          name: '–ú–∞–∫—Å–∏–º –¢–µ—Ö–Ω–∏–∫–æ–≤',
          role: 'IT-—ç–∫—Å–ø–µ—Ä—Ç',
          description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ IT-–∫–∞—Ä—å–µ—Ä–µ.',
          expertise_areas: ['technology', 'programming', 'it_career'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'pro',
          is_available: true
        }
      ];
      
      return {
        experts: fallbackExperts,
        user_subscription: 'free'
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—É
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram Web App endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async sendMessage(request: SendMessageRequest): Promise<SendMessageResponse> {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç—É —á–µ—Ä–µ–∑ Telegram API:', request.expert_id);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ session_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
      let sessionId: number | undefined = request.session_id;
      if (!sessionId) {
        const savedSessionId = this.getExpertSessionId(request.expert_id);
        sessionId = savedSessionId || undefined;
        console.log(`üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω session_id: ${sessionId || '–Ω–µ—Ç'}`);
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const sendData = {
        expert_id: request.expert_id,
        message: request.message,
        session_id: sessionId
      };

      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', sendData);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π Telegram endpoint –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const response = await this.post<SendMessageResponse>('/ai-engine/telegram/message/', sendData);
      
      if (response.success) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Telegram API');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const expertData = response.expert;
        this.saveSessionData(request.expert_id, {
          expertId: request.expert_id,
          sessionId: response.session_id,
          lastActivity: new Date().toISOString(),
          expertName: expertData.name,
          expertRole: expertData.role ?? 'AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        this.setActiveSession(
          request.expert_id, 
          response.session_id, 
          expertData.name
        );

        console.log(`üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: —Å–µ—Å—Å–∏—è ${response.session_id} –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${expertData.name}`);
        
        return response;
      } else {
        throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API:', error);
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ—Ç–≤–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞');
      
      const fallbackResponses = [
        '–ü–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI —Å–µ—Ä–≤–µ—Ä—É.',
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –º–µ—à–∞—é—Ç –º–Ω–µ –¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.',
        '–í–∞—à –∑–∞–ø—Ä–æ—Å –≤–∞–∂–µ–Ω –¥–ª—è –º–µ–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
        '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã!',
        '–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É. –°–µ–π—á–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å AI —Å–∏—Å—Ç–µ–º–æ–π, –Ω–æ —Å–∫–æ—Ä–æ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è.'
      ];
      
      const randomResponse: string = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)] || '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ API
      const savedSessionId = this.getExpertSessionId(request.expert_id);
      const fallbackSessionId = request.session_id || savedSessionId || Date.now();
      
      const fallbackResponse: SendMessageResponse = {
        success: true,
        session_id: fallbackSessionId,
        user_message: {
          id: Date.now(),
          content: request.message,
          created_at: new Date().toISOString()
        },
        expert_response: {
          id: Date.now() + 1,
          content: randomResponse,
          created_at: new Date().toISOString(),
          metadata: {
            provider: 'fallback',
            generation_time: 0.1,
            tokens_used: 0
          }
        },
        expert: {
          id: request.expert_id,
          name: '–≠–∫—Å–ø–µ—Ä—Ç'
        }
      };
      
      return fallbackResponse;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Django endpoint: GET /api/v1/ai-engine/sessions/
   */
  async getUserSessions(expertId?: number, limit = 20, offset = 0): Promise<SessionsResponse> {
    try {
      console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      const params: any = { limit, offset };
      if (expertId) {
        params.expert_id = expertId;
      }
      
      const response = await this.get<SessionsResponse>('/ai-engine/sessions/', params);
      console.log('‚úÖ –°–µ—Å—Å–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', response.sessions.length);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
   * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Django endpoint: GET /api/v1/ai-engine/sessions/{id}/messages/
   */
  async getSessionMessages(sessionId: number, limit = 50, offset = 0): Promise<SessionMessagesResponse> {
    try {
      console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏:', sessionId);
      
      const response = await this.get<SessionMessagesResponse>(
        `/ai-engine/sessions/${sessionId}/messages/`,
        { limit, offset }
      );
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', response.messages.length);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞
   * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Django endpoint: POST /api/v1/ai-engine/messages/{id}/rate/
   */
  async rateMessage(messageId: number, rating: number): Promise<{ success: boolean; message: string }> {
    try {
      console.log('‚≠ê –û—Ü–µ–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageId, '—Ä–µ–π—Ç–∏–Ω–≥:', rating);
      
      if (rating < 1 || rating > 5) {
        throw new Error('–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
      }
      
      const response = await this.post<{ success: boolean; message: string }>(
        `/ai-engine/messages/${messageId}/rate/`,
        { rating }
      );
      
      console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É');
    }
  }

  /**
   * –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ Telegram Web App API
   * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Django endpoint: POST /api/v1/ai-engine/telegram-app/
   */
  async telegramWebAppAction(action: string, data: any): Promise<any> {
    try {
      console.log('üì± Telegram Web App –¥–µ–π—Å—Ç–≤–∏–µ:', action);
      
      const response = await this.post('/ai-engine/telegram-app/', {
        action,
        ...data,
        telegram_user: window.Telegram?.WebApp?.initDataUnsafe?.user
      });
      
      console.log('‚úÖ Telegram Web App –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram Web App:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ ID
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
   */
  async getExpertById(expertId: number): Promise<Expert | null> {
    try {
      const { experts } = await this.getExperts();
      return experts.find(expert => expert.id === expertId) || null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async isExpertAvailable(expertId: number): Promise<boolean> {
    try {
      const expert = await this.getExpertById(expertId);
      return expert?.is_available || false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º
   * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Django endpoint: GET /api/v1/ai-engine/sessions/last/
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
   */
  async getLastActiveSession(expertId: number, includeInactive = false): Promise<LastActiveSessionResponse> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞:', expertId);
      
      const response = await this.get<LastActiveSessionResponse>('/ai-engine/sessions/last/', {
        expert_id: expertId,
        include_inactive: includeInactive ? 'true' : 'false'
      });
      
      if (response.has_session && response.session) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:', response.session.id);
        console.log(`üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Å—Å–∏–∏: ${response.metadata?.session_priority_score || 'N/A'}`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ localStorage
        this.saveSessionData(expertId, {
          expertId: expertId,
          sessionId: response.session.id,
          lastActivity: response.session.last_activity,
          expertName: response.session.expert.name,
          expertRole: response.session.expert.role
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        this.setActiveSession(
          expertId, 
          response.session.id, 
          response.session.expert.name
        );

        console.log(`üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: —Å–µ—Å—Å–∏—è ${response.session.id} –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${response.session.expert.name}`);
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.last_messages.length} –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏
        if (response.session.context_summary) {
          this.saveSessionContext(expertId, response.session.id, {
            summary: response.session.context_summary,
            messageCount: response.session.total_messages,
            lastActivity: response.session.last_activity,
            priorityScore: response.metadata?.session_priority_score || 50
          });
        }
      } else {
        console.log('‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è');
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
        this.clearExpertSession(expertId);
      }
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏:', error);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ API –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
      const localSessionId = this.getExpertSessionId(expertId);
      if (localSessionId) {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∫–∞–∫ fallback:', localSessionId);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return {
          has_session: true,
          session: {
            id: localSessionId,
            title: '',
            status: 'active',
            total_messages: 0,
            created_at: new Date().toISOString(),
            last_activity: new Date().toISOString(),
            expert: {
              id: expertId,
              name: '–≠–∫—Å–ø–µ—Ä—Ç',
              role: ''
            }
          },
          last_messages: []
        };
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—à–∏–±–∫–µ
      return {
        has_session: false,
        session: null,
        last_messages: []
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Django endpoint: GET /api/v1/ai-engine/sessions/statistics/
   */
  async getUserSessionsStatistics(days = 30): Promise<UserSessionsStatistics> {
    try {
      console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π –∑–∞ ${days} –¥–Ω–µ–π...`);
      
      const response = await this.get<UserSessionsStatistics>('/ai-engine/sessions/statistics/', {
        days: days
      });
      
      console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${response.general_stats.total_sessions} —Å–µ—Å—Å–∏–π, ${response.recommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`);
      
      // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const cacheKey = `user_sessions_stats_${days}d`;
      localStorage.setItem(cacheKey, JSON.stringify({
        data: response,
        timestamp: Date.now(),
        expires: Date.now() + 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç
      }));
      
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π:', error);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∫–∞–∫ fallback
      const cacheKey = `user_sessions_stats_${days}d`;
      const cached = localStorage.getItem(cacheKey);
      
      if (cached) {
        try {
          const cachedData = JSON.parse(cached);
          if (cachedData.expires > Date.now()) {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∫ fallback');
            return cachedData.data;
          }
        } catch (parseError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', parseError);
        }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—à–∏–±–∫–µ
      return {
        general_stats: {
          total_sessions: 0,
          total_messages: 0,
          active_sessions_count: 0,
          experts_used: 0,
          period_days: days,
          avg_messages_per_session: 0
        },
        expert_stats: [],
        active_sessions: [],
        resumable_sessions: [],
        recommendations: [],
        metadata: {
          generated_at: new Date().toISOString(),
          period_start: new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString(),
          period_end: new Date().toISOString()
        }
      };
    }
  }

  /**
   * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ª—É—á—à–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é
   */
  async findBestSessionToResume(expertId: number): Promise<ResumableSessionInfo | null> {
    try {
      console.log('üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ª—É—á—à–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
      
      const statistics = await this.getUserSessionsStatistics(7); // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
      const expertSessions = statistics.resumable_sessions.filter(
        session => session.expert_id === expertId
      );
      
      if (expertSessions.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        return null;
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é
      expertSessions.sort((a, b) => b.priority_score - a.priority_score);
      const bestSession = expertSessions[0];
      
      if (!bestSession) {
        console.log('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–µ—Å—Å–∏—é');
        return null;
      }
      
      console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –ª—É—á—à–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${bestSession.session_id} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${bestSession.priority_score})`);
      
      return bestSession;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–π —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ –≤ localStorage
   */
  private saveSessionContext(expertId: number, sessionId: number, context: {
    summary: string;
    messageCount: number;
    lastActivity: string;
    priorityScore: number;
  }): void {
    try {
      const key = `session_context_${expertId}_${sessionId}`;
      const contextData = {
        ...context,
        savedAt: new Date().toISOString()
      };
      
      localStorage.setItem(key, JSON.stringify(contextData));
      console.log(`üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${key}`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage
   */
  getSessionContext(expertId: number, sessionId: number): any | null {
    try {
      const key = `session_context_${expertId}_${sessionId}`;
      const stored = localStorage.getItem(key);
      
      if (stored) {
        const context = JSON.parse(stored);
        console.log(`üìñ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏: ${key}`);
        return context;
      }
      
      return null;
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
   */
  async getExpertRecommendations(expertId: number): Promise<SessionRecommendation[]> {
    try {
      const statistics = await this.getUserSessionsStatistics(14); // 2 –Ω–µ–¥–µ–ª–∏
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
      const expertRecommendations = statistics.recommendations.filter(
        rec => rec.expert_id === expertId
      );
      
      console.log(`üí° –ù–∞–π–¥–µ–Ω–æ ${expertRecommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ ${expertId}`);
      return expertRecommendations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      return [];
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –∫ —ç–∫—Å–ø–µ—Ä—Ç—É
   * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async autoRestoreContext(expertId: number): Promise<{
    restored: boolean;
    sessionId?: number;
    method: 'server' | 'local' | 'new';
    context?: any;
    messages?: ChatMessage[];
  }> {
    try {
      console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞:', expertId);
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Å–µ—Å—Å–∏—é
      const serverSession = await this.getLastActiveSession(expertId);
      if (serverSession.has_session && serverSession.session && serverSession.last_messages.length > 0) {
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
        return {
          restored: true,
          sessionId: serverSession.session.id,
          method: 'server',
          context: serverSession.session,
          messages: serverSession.last_messages
        };
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const localSessionId = this.getExpertSessionId(expertId);
      if (localSessionId) {
        try {
          const sessionMessages = await this.getSessionMessages(localSessionId);
          if (sessionMessages.messages.length > 0) {
            console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
            return {
              restored: true,
              sessionId: localSessionId,
              method: 'local',
              context: sessionMessages.session,
              messages: sessionMessages.messages
            };
          }
        } catch (localError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', localError);
        }
      }
      
      // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏');
      this.clearExpertSession(expertId);
      
      return {
        restored: false,
        method: 'new',
        context: null,
        messages: []
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      return {
        restored: false,
        method: 'new',
        context: null,
        messages: []
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const expertService = new ExpertService(); 