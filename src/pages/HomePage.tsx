/**
 * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å Telegram Web App API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
 */

import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useLaunchParams } from '@telegram-apps/sdk-react'
import Loading from '../components/common/Loading'
import { expertService, Expert } from '../services/expertService'

/**
 * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
 */
const HomePage: React.FC = () => {
  const navigate = useNavigate()
  const launchParams = useLaunchParams()
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [experts, setExperts] = useState<Expert[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [userSubscription, setUserSubscription] = useState<string>('free')
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å backend API
   */
  const loadExperts = async () => {
    try {
      setLoading(true)
      setError(null)
      
      console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å Django backend...')
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–µ–∫
      const response = await expertService.getExperts()
      
      setExperts(response.experts)
      setUserSubscription(response.user_subscription)
      
      console.log('‚úÖ –≠–∫—Å–ø–µ—Ä—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å backend:', response.experts.length)
      console.log('üë§ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.user_subscription)
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:', err)
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
      const fallbackExperts: Expert[] = [
        {
          id: 1,
          name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∏–∑–Ω–µ—Å–æ–≤',
          role: '–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
          description: '–û–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∏ —Å—Ç—Ä–∞—Ç–µ–≥. –ü–æ–º–æ–≥—É —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–∏–∑–Ω–µ—Å–∞, –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏.',
          expertise_areas: ['business', 'entrepreneurship', 'strategy'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'free',
          is_available: true
        },
        {
          id: 2,
          name: '–ï–ª–µ–Ω–∞ –ü—Å–∏—Ö–æ–ª–æ–≥–æ–≤–∞',
          role: '–ü—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
          description: '–ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ª–∏—á–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.',
          expertise_areas: ['psychology', 'relationships', 'mental_health'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'free',
          is_available: true
        },
        {
          id: 3,
          name: '–î–º–∏—Ç—Ä–∏–π –§–∏–Ω–∞–Ω—Å–æ–≤',
          role: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫',
          description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±—é–¥–∂–µ—Ç–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.',
          expertise_areas: ['finance', 'investing', 'budgeting'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'pro',
          is_available: true
        },
        {
          id: 4,
          name: '–ê–Ω–Ω–∞ –ö–∞—Ä—å–µ—Ä–æ–≤–∞',
          role: '–ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á',
          description: '–ü–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º.',
          expertise_areas: ['career', 'job_search', 'professional_development'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'free',
          is_available: true
        },
        {
          id: 5,
          name: '–ú–∞–∫—Å–∏–º –¢–µ—Ö–Ω–∏–∫–æ–≤',
          role: 'IT-—ç–∫—Å–ø–µ—Ä—Ç',
          description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ IT-–∫–∞—Ä—å–µ—Ä–µ.',
          expertise_areas: ['technology', 'programming', 'it_career'],
          total_conversations: 0,
          total_messages: 0,
          average_rating: 0,
          required_subscription: 'pro',
          is_available: true
        }
      ]
      
      setExperts(fallbackExperts)
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã fallback –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤')
      
    } finally {
      setLoading(false)
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
   * @param expert - –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç
   */
  const handleExpertSelect = async (expert: Expert) => {
    console.log('üéØ –í—ã–±—Ä–∞–Ω —ç–∫—Å–ø–µ—Ä—Ç:', expert.name)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞
    if (!expert.is_available) {
      console.warn('‚ö†Ô∏è –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', expert.name)
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è Pro —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    if (expert.required_subscription === 'pro' && userSubscription === 'free') {
      console.warn('üí∞ –ù—É–∂–Ω–∞ Pro –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞:', expert.name)
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
      return
    }
    
    navigate(`/chat/${expert.id}`)
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   * @param expertiseAreas - –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞
   */
  const getExpertIcon = (expertiseAreas: string[]) => {
    const iconMap: { [key: string]: string } = {
      business: 'üëî',
      entrepreneurship: 'üöÄ',
      psychology: 'üß†',
      relationships: 'üíù',
      finance: 'üí∞',
      investing: 'üìà',
      technology: 'üíª',
      programming: '‚å®Ô∏è',
      career: 'üìà',
      job_search: 'üîç'
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–∫–æ–Ω–∫—É
    for (const area of expertiseAreas) {
      if (iconMap[area]) {
        return iconMap[area]
      }
    }
    
    return 'üéØ' // –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–µ–π–¥–∂ –ø–æ–¥–ø–∏—Å–∫–∏
   * @param requiredSubscription - —Ç—Ä–µ–±—É–µ–º–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
   */
  const getSubscriptionBadge = (requiredSubscription: string) => {
    switch (requiredSubscription) {
      case 'pro':
        return { text: 'PRO', className: 'bg-yellow-100 text-yellow-800' }
      case 'premium':
        return { text: 'PREMIUM', className: 'bg-purple-100 text-purple-800' }
      default:
        return { text: 'FREE', className: 'bg-green-100 text-green-800' }
    }
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadExperts()
  }, [])
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loading text="–ó–∞–≥—Ä—É–∑–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤..." />
      </div>
    )
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (error && experts.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen telegram-spacing text-center">
        <div className="text-4xl mb-4">üòî</div>
        <h2 className="text-lg font-bold mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
        <p className="text-sm tg-hint mb-4">{error}</p>
        <button 
          onClick={loadExperts}
          className="tg-button"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    )
  }
  
  return (
    <div className="animate-fade-in">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
      <div className="text-center mb-6">
        <h1 
          className="text-2xl font-bold mb-2"
          style={{ color: 'var(--tg-theme-text-color, #000000)' }}
        >
          –°–æ–≤–µ—Ç –≠–∫—Å–ø–µ—Ä—Ç–æ–≤
        </h1>
        <p 
          className="text-sm"
          style={{ color: 'var(--tg-theme-hint-color, #999999)' }}
        >
          –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        </p>
        
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ */}
        {userSubscription && (
          <div className="mt-2">
            <span 
              className={`
                inline-flex 
                items-center 
                px-2 
                py-1 
                text-xs 
                rounded-full 
                font-medium
                ${getSubscriptionBadge(userSubscription).className}
              `}
            >
              –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {getSubscriptionBadge(userSubscription).text}
            </span>
          </div>
        )}
      </div>
      
      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API (–µ—Å–ª–∏ fallback –¥–∞–Ω–Ω—ã–µ) */}
      {error && experts.length > 0 && (
        <div className="mb-4 p-3 rounded-lg border border-yellow-200 bg-yellow-50">
          <p className="text-sm text-yellow-800">
            ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∫–∞–∑–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
          </p>
        </div>
      )}
      
      {/* –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ */}
      <div className="space-y-3">
        {experts.map((expert) => {
          const subscriptionBadge = getSubscriptionBadge(expert.required_subscription)
          const isAccessible = expert.is_available && 
            (expert.required_subscription === 'free' || userSubscription !== 'free')
          
          return (
            <div
              key={expert.id}
              onClick={() => handleExpertSelect(expert)}
              className={`
                card 
                cursor-pointer
                transition-all
                duration-200
                ${isAccessible 
                  ? 'hover:shadow-lg transform hover:scale-[1.02]' 
                  : 'opacity-60 cursor-not-allowed'
                }
              `}
            >
              <div className="flex items-start space-x-3">
                {/* –ê–≤–∞—Ç–∞—Ä —ç–∫—Å–ø–µ—Ä—Ç–∞ */}
                <div 
                  className="
                    w-12 
                    h-12 
                    rounded-full 
                    flex 
                    items-center 
                    justify-center 
                    text-2xl
                    flex-shrink-0
                  "
                  style={{
                    backgroundColor: isAccessible 
                      ? 'var(--tg-theme-button-color, #2481cc)' 
                      : 'var(--tg-theme-hint-color, #999999)',
                    color: '#ffffff'
                  }}
                >
                  {expert.avatar_url ? (
                    <img 
                      src={expert.avatar_url} 
                      alt={expert.name}
                      className="w-full h-full rounded-full object-cover"
                    />
                  ) : (
                    getExpertIcon(expert.expertise_areas)
                  )}
                </div>
                
                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–µ—Ä—Ç–µ */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between mb-1">
                    <h3 
                      className="font-semibold text-sm"
                      style={{ color: 'var(--tg-theme-text-color, #000000)' }}
                    >
                      {expert.name}
                    </h3>
                    
                    {/* –ë–µ–π–¥–∂ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ */}
                    <span 
                      className={`
                        px-2 
                        py-1 
                        text-xs 
                        rounded-full 
                        font-medium
                        ${subscriptionBadge.className}
                      `}
                    >
                      {subscriptionBadge.text}
                    </span>
                  </div>
                  
                  <p 
                    className="text-xs font-medium mb-2"
                    style={{ color: 'var(--tg-theme-accent-text-color, #2481cc)' }}
                  >
                    {expert.role}
                  </p>
                  
                  <p 
                    className="text-xs leading-relaxed mb-2"
                    style={{ color: 'var(--tg-theme-hint-color, #999999)' }}
                  >
                    {expert.description}
                  </p>
                  
                  {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ */}
                  {(expert.total_conversations > 0 || expert.average_rating > 0) && (
                    <div className="flex items-center space-x-3 text-xs">
                      {expert.total_conversations > 0 && (
                        <span style={{ color: 'var(--tg-theme-hint-color, #999999)' }}>
                          üí¨ {expert.total_conversations} –¥–∏–∞–ª–æ–≥–æ–≤
                        </span>
                      )}
                      {expert.average_rating > 0 && (
                        <span style={{ color: 'var(--tg-theme-hint-color, #999999)' }}>
                          ‚≠ê {expert.average_rating.toFixed(1)}
                        </span>
                      )}
                    </div>
                  )}
                  
                  {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ */}
                  {!isAccessible && expert.required_subscription !== 'free' && userSubscription === 'free' && (
                    <p className="text-xs text-orange-600 mt-1">
                      üîí –¢—Ä–µ–±—É–µ—Ç—Å—è {subscriptionBadge.text} –ø–æ–¥–ø–∏—Å–∫–∞
                    </p>
                  )}
                </div>
                
                {/* –°—Ç—Ä–µ–ª–∫–∞ */}
                <div 
                  className="text-lg"
                  style={{ color: 'var(--tg-theme-hint-color, #999999)' }}
                >
                  {isAccessible ? '‚Üí' : 'üîí'}
                </div>
              </div>
            </div>
          )
        })}
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram (–≤ dev —Ä–µ–∂–∏–º–µ) */}
      {import.meta.env.DEV && launchParams && (
        <div className="mt-6 p-3 rounded text-xs border-t">
          <details>
            <summary 
              className="cursor-pointer font-medium"
              style={{ color: 'var(--tg-theme-link-color, #2481cc)' }}
            >
              Debug: Telegram –¥–∞–Ω–Ω—ã–µ
            </summary>
            <pre 
              className="mt-2 text-xs overflow-auto"
              style={{ color: 'var(--tg-theme-hint-color, #999999)' }}
            >
              {JSON.stringify(launchParams, null, 2)}
            </pre>
          </details>
        </div>
      )}
    </div>
  )
}

export default HomePage