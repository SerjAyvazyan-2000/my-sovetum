#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π frontend –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–°–æ–≤–µ—Ç –≠–∫—Å–ø–µ—Ä—Ç–æ–≤"

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ frontend —Å localStorage
–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.
"""

import asyncio
import os
import sys
import json
import time
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/mnt/apps/sovetum/sovetum_project/sovetum-backend')

import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sovetum.settings')
django.setup()

from apps.ai_engine.models import ConversationSession, AIMessage
from apps.ai_engine.ai_service import AIExpertService
from apps.experts.models import Expert
from apps.users.models import User

# –ò–º–∏—Ç–∞—Ü–∏—è localStorage
class MockLocalStorage:
    """
    –ò–º–∏—Ç–∞—Ü–∏—è localStorage –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def __init__(self):
        self.storage = {}
    
    def getItem(self, key: str) -> str | None:
        return self.storage.get(key)
    
    def setItem(self, key: str, value: str) -> None:
        self.storage[key] = value
        print(f"üíæ localStorage.setItem('{key}', '{value[:100]}...')")
    
    def removeItem(self, key: str) -> None:
        if key in self.storage:
            del self.storage[key]
            print(f"üßπ localStorage.removeItem('{key}')")
    
    def clear(self) -> None:
        self.storage.clear()
        print("üßπ localStorage.clear()")

# –ò–º–∏—Ç–∞—Ü–∏—è ExpertService frontend –ª–æ–≥–∏–∫–∏
class MockExpertService:
    """
    –ò–º–∏—Ç–∞—Ü–∏—è ExpertService —Å localStorage –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    STORAGE_KEYS = {
        'EXPERT_SESSIONS': 'sovetum_expert_sessions',
        'ACTIVE_SESSION': 'sovetum_active_session'
    }
    
    def __init__(self, localStorage: MockLocalStorage):
        self.localStorage = localStorage
        self.ai_service = AIExpertService()
    
    def getStoredSessions(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage"""
        try:
            stored = self.localStorage.getItem(self.STORAGE_KEYS['EXPERT_SESSIONS'])
            return json.loads(stored) if stored else {}
        except Exception as error:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∏–∑ localStorage: {error}')
            return {}
    
    def saveSessionData(self, expertId: int, sessionData: dict) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ localStorage"""
        try:
            sessions = self.getStoredSessions()
            sessions[str(expertId)] = sessionData
            self.localStorage.setItem(
                self.STORAGE_KEYS['EXPERT_SESSIONS'], 
                json.dumps(sessions)
            )
            print(f'üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expertId}: {sessionData}')
        except Exception as error:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ localStorage: {error}')
    
    def getExpertSessionId(self, expertId: int) -> int | None:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        sessions = self.getStoredSessions()
        sessionData = sessions.get(str(expertId))
        
        if not sessionData:
            print(f'üìù –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expertId}')
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
        from datetime import datetime
        last_activity = datetime.fromisoformat(sessionData['lastActivity'].replace('Z', '+00:00'))
        now = datetime.now(last_activity.tzinfo)
        hours_since_last_activity = (now - last_activity).total_seconds() / 3600
        
        if hours_since_last_activity > 24:
            print(f'‚è∞ –°–µ—Å—Å–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expertId} —É—Å—Ç–∞—Ä–µ–ª–∞ ({hours_since_last_activity:.1f}—á –Ω–∞–∑–∞–¥)')
            self.clearExpertSession(expertId)
            return None
        
        print(f'üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é {sessionData["sessionId"]} –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expertId}')
        return sessionData['sessionId']
    
    def setActiveSession(self, expertId: int, sessionId: int, expertName: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é"""
        try:
            activeSession = {
                'expertId': expertId,
                'sessionId': sessionId,
                'expertName': expertName
            }
            self.localStorage.setItem(
                self.STORAGE_KEYS['ACTIVE_SESSION'], 
                json.dumps(activeSession)
            )
            print(f'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {activeSession}')
        except Exception as error:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {error}')
    
    def clearExpertSession(self, expertId: int) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        try:
            sessions = self.getStoredSessions()
            if str(expertId) in sessions:
                del sessions[str(expertId)]
                self.localStorage.setItem(
                    self.STORAGE_KEYS['EXPERT_SESSIONS'], 
                    json.dumps(sessions)
                )
            print(f'üßπ –°–µ—Å—Å–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expertId} –æ—á–∏—â–µ–Ω–∞')
        except Exception as error:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {error}')
    
    async def sendMessage(self, expert_id: int, message: str, session_id: int = None) -> dict:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ sendMessage —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏—è–º–∏
        """
        print(f'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç—É {expert_id}: {message[:50]}...')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ session_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if not session_id:
            session_id = self.getExpertSessionId(expert_id)
            print(f'üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω session_id: {session_id or "–Ω–µ—Ç"}')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user = await User.objects.aget(username='test_context_user')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI service
        result = await self.ai_service.process_user_message(
            user=user,
            expert_id=expert_id,
            message_content=message,
            session_id=session_id
        )
        
        if result.get('success'):
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API
            expert = await Expert.objects.aget(id=expert_id)
            response = {
                'success': True,
                'session_id': result['session_id'],
                'user_message': result['user_message'],
                'expert_response': result['expert_response'],
                'expert': {
                    'id': expert.id,
                    'name': expert.name,
                    'role': expert.role
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
            self.saveSessionData(expert_id, {
                'expertId': expert_id,
                'sessionId': result['session_id'],
                'lastActivity': result['expert_response']['created_at'],
                'expertName': expert.name,
                'expertRole': expert.role
            })
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            self.setActiveSession(expert_id, result['session_id'], expert.name)
            
            print(f'üíæ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: —Å–µ—Å—Å–∏—è {result["session_id"]} –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert.name}')
            return response
        else:
            return result

async def test_frontend_sessions():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π frontend
    """
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–ï–°–°–ò–ô FRONTEND")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –∏–º–∏—Ç–∞—Ü–∏—é localStorage –∏ ExpertService
    localStorage = MockLocalStorage()
    expertService = MockExpertService(localStorage)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
    expert = await Expert.objects.aget(name="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∏–∑–Ω–µ—Å–æ–≤", is_active=True)
    expert_id = expert.id
    
    print(f"\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞: {expert.name} (ID: {expert_id})")
    
    # –û—á–∏—â–∞–µ–º localStorage
    localStorage.clear()
    
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏)
    print("\n2Ô∏è‚É£ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)...")
    response1 = await expertService.sendMessage(
        expert_id=expert_id,
        message="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞. –Ø —Ö–æ—á—É –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ñ–µ."
    )
    
    session_id = response1['session_id']
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
    print(f"üìù –û—Ç–≤–µ—Ç: {response1['expert_response']['content'][:100]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
    stored_sessions = expertService.getStoredSessions()
    print(f"üíæ –í localStorage —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(stored_sessions)}")
    
    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏)
    print("\n3Ô∏è‚É£ –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è)...")
    response2 = await expertService.sendMessage(
        expert_id=expert_id,
        message="–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞?"
    )
    
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è: {response2['session_id']}")
    print(f"üìù –û—Ç–≤–µ—Ç: {response2['expert_response']['content'][:100]}...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if session_id == response2['session_id']:
        print("‚úÖ –°–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    
    # –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    print("\n4Ô∏è‚É£ –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)...")
    response3 = await expertService.sendMessage(
        expert_id=expert_id,
        message="–ú–æ–∂–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –∞—Ä–µ–Ω–¥—É –¥–ª—è –º–æ–µ–≥–æ –∫–∞—Ñ–µ?"
    )
    
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è: {response3['session_id']}")
    print(f"üìù –û—Ç–≤–µ—Ç: {response3['expert_response']['content'][:100]}...")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
    print("\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    cafe_mentioned = False
    anna_mentioned = False
    
    for i, response in enumerate([response1, response2, response3], 1):
        content = response['expert_response']['content'].lower()
        print(f"   –û—Ç–≤–µ—Ç {i}: {'üè™' if '–∫–∞—Ñ–µ' in content else '‚ùå'} –∫–∞—Ñ–µ, {'üë§' if '–∞–Ω–Ω–∞' in content else '‚ùå'} –∏–º—è")
        
        if '–∫–∞—Ñ–µ' in content:
            cafe_mentioned = True
        if '–∞–Ω–Ω–∞' in content:
            anna_mentioned = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–∏–∑–æ–ª—è—Ü–∏—è)
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏...")
    
    other_expert = await Expert.objects.exclude(id=expert_id).first()
    if other_expert:
        response_other = await expertService.sendMessage(
            expert_id=other_expert.id,
            message="–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏."
        )
        
        other_content = response_other['expert_response']['content'].lower()
        
        if '–∫–∞—Ñ–µ' not in other_content and '–∞–Ω–Ω–∞' not in other_content:
            print(f"‚úÖ –ò–∑–æ–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {other_expert.name} –Ω–µ –∑–Ω–∞–µ—Ç –æ –∫–∞—Ñ–µ –ê–Ω–Ω—ã")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê –∏–∑–æ–ª—è—Ü–∏–∏: {other_expert.name} –∑–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥—Ä—É–≥–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ FRONTEND –°–ï–°–°–ò–ô")
    print("=" * 60)
    
    print(f"üíæ –°–µ—Å—Å–∏–π –≤ localStorage: {len(expertService.getStoredSessions())}")
    print(f"üîÑ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π: {'‚úÖ' if session_id == response2['session_id'] == response3['session_id'] else '‚ùå'}")
    print(f"üè™ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ –∫–∞—Ñ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {'‚úÖ' if cafe_mentioned else '‚ùå'}")
    print(f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {'‚úÖ' if anna_mentioned else '‚ö†Ô∏è'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ localStorage
    print(f"\nüíæ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ localStorage:")
    for key, value in localStorage.storage.items():
        print(f"   {key}: {value[:200]}...")
    
    return all([
        session_id == response2['session_id'] == response3['session_id'],
        cafe_mentioned
    ])

if __name__ == "__main__":
    async def main():
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π frontend...")
        
        success = await test_frontend_sessions()
        
        if success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ FRONTEND –ü–†–û–ô–î–ï–ù–´!")
            print("   –°–∏—Å—Ç–µ–º–∞ —Å–µ—Å—Å–∏–π —Å localStorage —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–µ—Å—Å–∏–π frontend.")
        
        return success
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(main()) 